plugins {
    id("java")
    id("org.springframework.boot") version "${springBootVersion}"
    id("io.spring.dependency-management") version "${springDependencyManagementVersion}"

    id("com.palantir.docker") version "0.22.1"
    //region Kotlin related plugins (uncomment if you want to use Kotlin in project or delete otherwise)
    // kotlin("jvm") version "1.3.61"
    // kotlin("plugin.spring") version "1.3.61"
    //endregion
}

group = "org.madtest"
java.sourceCompatibility = JavaVersion.VERSION_1_8

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("org.springframework.boot:spring-boot-starter-actuator")
    implementation("org.springframework.boot:spring-boot-starter-security")
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
    implementation("io.jsonwebtoken:jjwt:0.9.1")
    annotationProcessor("org.projectlombok:lombok:${lombokVersion}")
    compileOnly("org.projectlombok:lombok:${lombokVersion}")
    // implementation("org.springframework.boot:spring-boot-starter-jdbc")
    // implementation("org.flywaydb:flyway-core")
    // runtimeOnly("org.postgresql:postgresql")
    //region Kotlin related deps (uncomment if you want to use Kotlin in project or delete otherwise)
    // implementation("org.jetbrains.kotlin:kotlin-reflect")
    // implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
    // implementation("com.fasterxml.jackson.module:jackson-module-kotlin")
    //endregion
    testAnnotationProcessor("org.projectlombok:lombok:${lombokVersion}")
    testCompileOnly("org.projectlombok:lombok:${lombokVersion}")
    testImplementation("org.springframework.boot:spring-boot-starter-test")
    testImplementation("org.springframework.security:spring-security-test")
}


tasks.withType(Test) {
    useJUnitPlatform()
}

//region Kotlin related config (uncomment if you want to use Kotlin in project or delete otherwise)
//tasks.withType<KotlinCompile> {
//    kotlinOptions {
//        freeCompilerArgs = listOf("-Xjsr305=strict")
//        jvmTarget = "1.8"
//    }
//}
//endregion

docker {
    dependsOn(tasks.getByName("build"))
    name = "$dockerImagesPrefix/app"
    setDockerfile(file("Dockerfile"))
    files(file("build/libs/app.jar"), file("docker-entrypoint.sh"))
    noCache(true)
    pull(true)
}
